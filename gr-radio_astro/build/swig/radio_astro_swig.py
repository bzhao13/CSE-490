# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_radio_astro_swig', [dirname(__file__)])
        except ImportError:
            import _radio_astro_swig
            return _radio_astro_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_radio_astro_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _radio_astro_swig = swig_import_helper()
    del swig_import_helper
else:
    import _radio_astro_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _radio_astro_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _radio_astro_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _radio_astro_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _radio_astro_swig.high_res_timer_epoch()
class dedispersion(object):
    """Proxy of C++ gr::radio_astro::dedispersion class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vec_length, dms, f_obs, bw, t_int, nt):
        """make(int vec_length, float dms, float f_obs, float bw, float t_int, int nt) -> dedispersion_sptr"""
        return _radio_astro_swig.dedispersion_make(vec_length, dms, f_obs, bw, t_int, nt)

    make = staticmethod(make)
    __swig_destroy__ = _radio_astro_swig.delete_dedispersion
    __del__ = lambda self: None
dedispersion_swigregister = _radio_astro_swig.dedispersion_swigregister
dedispersion_swigregister(dedispersion)

def dedispersion_make(vec_length, dms, f_obs, bw, t_int, nt):
    """dedispersion_make(int vec_length, float dms, float f_obs, float bw, float t_int, int nt) -> dedispersion_sptr"""
    return _radio_astro_swig.dedispersion_make(vec_length, dms, f_obs, bw, t_int, nt)

class dedispersion_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radio_astro::dedispersion)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::radio_astro::dedispersion)> self) -> dedispersion_sptr
        __init__(boost::shared_ptr<(gr::radio_astro::dedispersion)> self, dedispersion p) -> dedispersion_sptr
        """
        this = _radio_astro_swig.new_dedispersion_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dedispersion_sptr self) -> dedispersion"""
        return _radio_astro_swig.dedispersion_sptr___deref__(self)

    __swig_destroy__ = _radio_astro_swig.delete_dedispersion_sptr
    __del__ = lambda self: None

    def make(self, vec_length, dms, f_obs, bw, t_int, nt):
        """make(dedispersion_sptr self, int vec_length, float dms, float f_obs, float bw, float t_int, int nt) -> dedispersion_sptr"""
        return _radio_astro_swig.dedispersion_sptr_make(self, vec_length, dms, f_obs, bw, t_int, nt)


    def history(self):
        """history(dedispersion_sptr self) -> unsigned int"""
        return _radio_astro_swig.dedispersion_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dedispersion_sptr self, int which, int delay)
        declare_sample_delay(dedispersion_sptr self, unsigned int delay)
        """
        return _radio_astro_swig.dedispersion_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dedispersion_sptr self, int which) -> unsigned int"""
        return _radio_astro_swig.dedispersion_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dedispersion_sptr self) -> int"""
        return _radio_astro_swig.dedispersion_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dedispersion_sptr self) -> double"""
        return _radio_astro_swig.dedispersion_sptr_relative_rate(self)


    def start(self):
        """start(dedispersion_sptr self) -> bool"""
        return _radio_astro_swig.dedispersion_sptr_start(self)


    def stop(self):
        """stop(dedispersion_sptr self) -> bool"""
        return _radio_astro_swig.dedispersion_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dedispersion_sptr self, unsigned int which_input) -> uint64_t"""
        return _radio_astro_swig.dedispersion_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dedispersion_sptr self, unsigned int which_output) -> uint64_t"""
        return _radio_astro_swig.dedispersion_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dedispersion_sptr self) -> int"""
        return _radio_astro_swig.dedispersion_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dedispersion_sptr self, int m)"""
        return _radio_astro_swig.dedispersion_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dedispersion_sptr self)"""
        return _radio_astro_swig.dedispersion_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dedispersion_sptr self) -> bool"""
        return _radio_astro_swig.dedispersion_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dedispersion_sptr self, int m)"""
        return _radio_astro_swig.dedispersion_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dedispersion_sptr self) -> int"""
        return _radio_astro_swig.dedispersion_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dedispersion_sptr self, int i) -> long"""
        return _radio_astro_swig.dedispersion_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dedispersion_sptr self, long max_output_buffer)
        set_max_output_buffer(dedispersion_sptr self, int port, long max_output_buffer)
        """
        return _radio_astro_swig.dedispersion_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dedispersion_sptr self, int i) -> long"""
        return _radio_astro_swig.dedispersion_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dedispersion_sptr self, long min_output_buffer)
        set_min_output_buffer(dedispersion_sptr self, int port, long min_output_buffer)
        """
        return _radio_astro_swig.dedispersion_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dedispersion_sptr self, int which) -> float
        pc_input_buffers_full(dedispersion_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.dedispersion_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dedispersion_sptr self, int which) -> float
        pc_input_buffers_full_avg(dedispersion_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.dedispersion_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dedispersion_sptr self, int which) -> float
        pc_input_buffers_full_var(dedispersion_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.dedispersion_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dedispersion_sptr self, int which) -> float
        pc_output_buffers_full(dedispersion_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.dedispersion_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dedispersion_sptr self, int which) -> float
        pc_output_buffers_full_avg(dedispersion_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.dedispersion_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dedispersion_sptr self, int which) -> float
        pc_output_buffers_full_var(dedispersion_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.dedispersion_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dedispersion_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radio_astro_swig.dedispersion_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dedispersion_sptr self)"""
        return _radio_astro_swig.dedispersion_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dedispersion_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radio_astro_swig.dedispersion_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dedispersion_sptr self) -> int"""
        return _radio_astro_swig.dedispersion_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dedispersion_sptr self) -> int"""
        return _radio_astro_swig.dedispersion_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dedispersion_sptr self, int priority) -> int"""
        return _radio_astro_swig.dedispersion_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dedispersion_sptr self) -> std::string"""
        return _radio_astro_swig.dedispersion_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dedispersion_sptr self) -> std::string"""
        return _radio_astro_swig.dedispersion_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dedispersion_sptr self) -> io_signature_sptr"""
        return _radio_astro_swig.dedispersion_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dedispersion_sptr self) -> io_signature_sptr"""
        return _radio_astro_swig.dedispersion_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dedispersion_sptr self) -> long"""
        return _radio_astro_swig.dedispersion_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dedispersion_sptr self) -> basic_block_sptr"""
        return _radio_astro_swig.dedispersion_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dedispersion_sptr self, int ninputs, int noutputs) -> bool"""
        return _radio_astro_swig.dedispersion_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dedispersion_sptr self) -> std::string"""
        return _radio_astro_swig.dedispersion_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dedispersion_sptr self, std::string name)"""
        return _radio_astro_swig.dedispersion_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dedispersion_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radio_astro_swig.dedispersion_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dedispersion_sptr self) -> swig_int_ptr"""
        return _radio_astro_swig.dedispersion_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dedispersion_sptr self) -> swig_int_ptr"""
        return _radio_astro_swig.dedispersion_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dedispersion_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radio_astro_swig.dedispersion_sptr_message_subscribers(self, which_port)

dedispersion_sptr_swigregister = _radio_astro_swig.dedispersion_sptr_swigregister
dedispersion_sptr_swigregister(dedispersion_sptr)


dedispersion_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dedispersion = dedispersion.make;

class detect(object):
    """Proxy of C++ gr::radio_astro::detect class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(vec_length, dms, f_obs, bw, t_int, nt):
        """make(int vec_length, float dms, float f_obs, float bw, float t_int, int nt) -> detect_sptr"""
        return _radio_astro_swig.detect_make(vec_length, dms, f_obs, bw, t_int, nt)

    make = staticmethod(make)

    def set_dms(self, dms):
        """set_dms(detect self, float dms)"""
        return _radio_astro_swig.detect_set_dms(self, dms)


    def set_vlen(self, vec_length):
        """set_vlen(detect self, int vec_length)"""
        return _radio_astro_swig.detect_set_vlen(self, vec_length)


    def set_mode(self, nt):
        """set_mode(detect self, int nt)"""
        return _radio_astro_swig.detect_set_mode(self, nt)


    def set_bw(self, bw):
        """set_bw(detect self, float bw)"""
        return _radio_astro_swig.detect_set_bw(self, bw)


    def set_freq(self, f_obs):
        """set_freq(detect self, float f_obs)"""
        return _radio_astro_swig.detect_set_freq(self, f_obs)

    __swig_destroy__ = _radio_astro_swig.delete_detect
    __del__ = lambda self: None
detect_swigregister = _radio_astro_swig.detect_swigregister
detect_swigregister(detect)

def detect_make(vec_length, dms, f_obs, bw, t_int, nt):
    """detect_make(int vec_length, float dms, float f_obs, float bw, float t_int, int nt) -> detect_sptr"""
    return _radio_astro_swig.detect_make(vec_length, dms, f_obs, bw, t_int, nt)

class detect_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radio_astro::detect)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::radio_astro::detect)> self) -> detect_sptr
        __init__(boost::shared_ptr<(gr::radio_astro::detect)> self, detect p) -> detect_sptr
        """
        this = _radio_astro_swig.new_detect_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(detect_sptr self) -> detect"""
        return _radio_astro_swig.detect_sptr___deref__(self)

    __swig_destroy__ = _radio_astro_swig.delete_detect_sptr
    __del__ = lambda self: None

    def make(self, vec_length, dms, f_obs, bw, t_int, nt):
        """make(detect_sptr self, int vec_length, float dms, float f_obs, float bw, float t_int, int nt) -> detect_sptr"""
        return _radio_astro_swig.detect_sptr_make(self, vec_length, dms, f_obs, bw, t_int, nt)


    def set_dms(self, dms):
        """set_dms(detect_sptr self, float dms)"""
        return _radio_astro_swig.detect_sptr_set_dms(self, dms)


    def set_vlen(self, vec_length):
        """set_vlen(detect_sptr self, int vec_length)"""
        return _radio_astro_swig.detect_sptr_set_vlen(self, vec_length)


    def set_mode(self, nt):
        """set_mode(detect_sptr self, int nt)"""
        return _radio_astro_swig.detect_sptr_set_mode(self, nt)


    def set_bw(self, bw):
        """set_bw(detect_sptr self, float bw)"""
        return _radio_astro_swig.detect_sptr_set_bw(self, bw)


    def set_freq(self, f_obs):
        """set_freq(detect_sptr self, float f_obs)"""
        return _radio_astro_swig.detect_sptr_set_freq(self, f_obs)


    def history(self):
        """history(detect_sptr self) -> unsigned int"""
        return _radio_astro_swig.detect_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(detect_sptr self, int which, int delay)
        declare_sample_delay(detect_sptr self, unsigned int delay)
        """
        return _radio_astro_swig.detect_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(detect_sptr self, int which) -> unsigned int"""
        return _radio_astro_swig.detect_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(detect_sptr self) -> int"""
        return _radio_astro_swig.detect_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(detect_sptr self) -> double"""
        return _radio_astro_swig.detect_sptr_relative_rate(self)


    def start(self):
        """start(detect_sptr self) -> bool"""
        return _radio_astro_swig.detect_sptr_start(self)


    def stop(self):
        """stop(detect_sptr self) -> bool"""
        return _radio_astro_swig.detect_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(detect_sptr self, unsigned int which_input) -> uint64_t"""
        return _radio_astro_swig.detect_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(detect_sptr self, unsigned int which_output) -> uint64_t"""
        return _radio_astro_swig.detect_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(detect_sptr self) -> int"""
        return _radio_astro_swig.detect_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(detect_sptr self, int m)"""
        return _radio_astro_swig.detect_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(detect_sptr self)"""
        return _radio_astro_swig.detect_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(detect_sptr self) -> bool"""
        return _radio_astro_swig.detect_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(detect_sptr self, int m)"""
        return _radio_astro_swig.detect_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(detect_sptr self) -> int"""
        return _radio_astro_swig.detect_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(detect_sptr self, int i) -> long"""
        return _radio_astro_swig.detect_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(detect_sptr self, long max_output_buffer)
        set_max_output_buffer(detect_sptr self, int port, long max_output_buffer)
        """
        return _radio_astro_swig.detect_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(detect_sptr self, int i) -> long"""
        return _radio_astro_swig.detect_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(detect_sptr self, long min_output_buffer)
        set_min_output_buffer(detect_sptr self, int port, long min_output_buffer)
        """
        return _radio_astro_swig.detect_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(detect_sptr self, int which) -> float
        pc_input_buffers_full(detect_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.detect_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(detect_sptr self, int which) -> float
        pc_input_buffers_full_avg(detect_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.detect_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(detect_sptr self, int which) -> float
        pc_input_buffers_full_var(detect_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.detect_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(detect_sptr self, int which) -> float
        pc_output_buffers_full(detect_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.detect_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(detect_sptr self, int which) -> float
        pc_output_buffers_full_avg(detect_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.detect_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(detect_sptr self, int which) -> float
        pc_output_buffers_full_var(detect_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.detect_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(detect_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radio_astro_swig.detect_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(detect_sptr self)"""
        return _radio_astro_swig.detect_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(detect_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radio_astro_swig.detect_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(detect_sptr self) -> int"""
        return _radio_astro_swig.detect_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(detect_sptr self) -> int"""
        return _radio_astro_swig.detect_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(detect_sptr self, int priority) -> int"""
        return _radio_astro_swig.detect_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(detect_sptr self) -> std::string"""
        return _radio_astro_swig.detect_sptr_name(self)


    def symbol_name(self):
        """symbol_name(detect_sptr self) -> std::string"""
        return _radio_astro_swig.detect_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(detect_sptr self) -> io_signature_sptr"""
        return _radio_astro_swig.detect_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(detect_sptr self) -> io_signature_sptr"""
        return _radio_astro_swig.detect_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(detect_sptr self) -> long"""
        return _radio_astro_swig.detect_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(detect_sptr self) -> basic_block_sptr"""
        return _radio_astro_swig.detect_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(detect_sptr self, int ninputs, int noutputs) -> bool"""
        return _radio_astro_swig.detect_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(detect_sptr self) -> std::string"""
        return _radio_astro_swig.detect_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(detect_sptr self, std::string name)"""
        return _radio_astro_swig.detect_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(detect_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radio_astro_swig.detect_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(detect_sptr self) -> swig_int_ptr"""
        return _radio_astro_swig.detect_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(detect_sptr self) -> swig_int_ptr"""
        return _radio_astro_swig.detect_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(detect_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radio_astro_swig.detect_sptr_message_subscribers(self, which_port)

detect_sptr_swigregister = _radio_astro_swig.detect_sptr_swigregister
detect_sptr_swigregister(detect_sptr)


detect_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
detect = detect.make;

class vmedian(object):
    """Proxy of C++ gr::radio_astro::vmedian class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(vec_length, n):
        """make(int vec_length, int n) -> vmedian_sptr"""
        return _radio_astro_swig.vmedian_make(vec_length, n)

    make = staticmethod(make)

    def set_vlen(self, vec_length):
        """set_vlen(vmedian self, int vec_length)"""
        return _radio_astro_swig.vmedian_set_vlen(self, vec_length)


    def set_mode(self, n):
        """set_mode(vmedian self, int n)"""
        return _radio_astro_swig.vmedian_set_mode(self, n)

    __swig_destroy__ = _radio_astro_swig.delete_vmedian
    __del__ = lambda self: None
vmedian_swigregister = _radio_astro_swig.vmedian_swigregister
vmedian_swigregister(vmedian)

def vmedian_make(vec_length, n):
    """vmedian_make(int vec_length, int n) -> vmedian_sptr"""
    return _radio_astro_swig.vmedian_make(vec_length, n)

class vmedian_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radio_astro::vmedian)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::radio_astro::vmedian)> self) -> vmedian_sptr
        __init__(boost::shared_ptr<(gr::radio_astro::vmedian)> self, vmedian p) -> vmedian_sptr
        """
        this = _radio_astro_swig.new_vmedian_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(vmedian_sptr self) -> vmedian"""
        return _radio_astro_swig.vmedian_sptr___deref__(self)

    __swig_destroy__ = _radio_astro_swig.delete_vmedian_sptr
    __del__ = lambda self: None

    def make(self, vec_length, n):
        """make(vmedian_sptr self, int vec_length, int n) -> vmedian_sptr"""
        return _radio_astro_swig.vmedian_sptr_make(self, vec_length, n)


    def set_vlen(self, vec_length):
        """set_vlen(vmedian_sptr self, int vec_length)"""
        return _radio_astro_swig.vmedian_sptr_set_vlen(self, vec_length)


    def set_mode(self, n):
        """set_mode(vmedian_sptr self, int n)"""
        return _radio_astro_swig.vmedian_sptr_set_mode(self, n)


    def history(self):
        """history(vmedian_sptr self) -> unsigned int"""
        return _radio_astro_swig.vmedian_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(vmedian_sptr self, int which, int delay)
        declare_sample_delay(vmedian_sptr self, unsigned int delay)
        """
        return _radio_astro_swig.vmedian_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(vmedian_sptr self, int which) -> unsigned int"""
        return _radio_astro_swig.vmedian_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(vmedian_sptr self) -> int"""
        return _radio_astro_swig.vmedian_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(vmedian_sptr self) -> double"""
        return _radio_astro_swig.vmedian_sptr_relative_rate(self)


    def start(self):
        """start(vmedian_sptr self) -> bool"""
        return _radio_astro_swig.vmedian_sptr_start(self)


    def stop(self):
        """stop(vmedian_sptr self) -> bool"""
        return _radio_astro_swig.vmedian_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(vmedian_sptr self, unsigned int which_input) -> uint64_t"""
        return _radio_astro_swig.vmedian_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(vmedian_sptr self, unsigned int which_output) -> uint64_t"""
        return _radio_astro_swig.vmedian_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(vmedian_sptr self) -> int"""
        return _radio_astro_swig.vmedian_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(vmedian_sptr self, int m)"""
        return _radio_astro_swig.vmedian_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(vmedian_sptr self)"""
        return _radio_astro_swig.vmedian_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(vmedian_sptr self) -> bool"""
        return _radio_astro_swig.vmedian_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(vmedian_sptr self, int m)"""
        return _radio_astro_swig.vmedian_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(vmedian_sptr self) -> int"""
        return _radio_astro_swig.vmedian_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(vmedian_sptr self, int i) -> long"""
        return _radio_astro_swig.vmedian_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(vmedian_sptr self, long max_output_buffer)
        set_max_output_buffer(vmedian_sptr self, int port, long max_output_buffer)
        """
        return _radio_astro_swig.vmedian_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(vmedian_sptr self, int i) -> long"""
        return _radio_astro_swig.vmedian_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(vmedian_sptr self, long min_output_buffer)
        set_min_output_buffer(vmedian_sptr self, int port, long min_output_buffer)
        """
        return _radio_astro_swig.vmedian_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(vmedian_sptr self, int which) -> float
        pc_input_buffers_full(vmedian_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.vmedian_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(vmedian_sptr self, int which) -> float
        pc_input_buffers_full_avg(vmedian_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.vmedian_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(vmedian_sptr self, int which) -> float
        pc_input_buffers_full_var(vmedian_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.vmedian_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(vmedian_sptr self, int which) -> float
        pc_output_buffers_full(vmedian_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.vmedian_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(vmedian_sptr self, int which) -> float
        pc_output_buffers_full_avg(vmedian_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.vmedian_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(vmedian_sptr self, int which) -> float
        pc_output_buffers_full_var(vmedian_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.vmedian_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(vmedian_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radio_astro_swig.vmedian_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(vmedian_sptr self)"""
        return _radio_astro_swig.vmedian_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(vmedian_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radio_astro_swig.vmedian_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(vmedian_sptr self) -> int"""
        return _radio_astro_swig.vmedian_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(vmedian_sptr self) -> int"""
        return _radio_astro_swig.vmedian_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(vmedian_sptr self, int priority) -> int"""
        return _radio_astro_swig.vmedian_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(vmedian_sptr self) -> std::string"""
        return _radio_astro_swig.vmedian_sptr_name(self)


    def symbol_name(self):
        """symbol_name(vmedian_sptr self) -> std::string"""
        return _radio_astro_swig.vmedian_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(vmedian_sptr self) -> io_signature_sptr"""
        return _radio_astro_swig.vmedian_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(vmedian_sptr self) -> io_signature_sptr"""
        return _radio_astro_swig.vmedian_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(vmedian_sptr self) -> long"""
        return _radio_astro_swig.vmedian_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(vmedian_sptr self) -> basic_block_sptr"""
        return _radio_astro_swig.vmedian_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(vmedian_sptr self, int ninputs, int noutputs) -> bool"""
        return _radio_astro_swig.vmedian_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(vmedian_sptr self) -> std::string"""
        return _radio_astro_swig.vmedian_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(vmedian_sptr self, std::string name)"""
        return _radio_astro_swig.vmedian_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(vmedian_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radio_astro_swig.vmedian_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(vmedian_sptr self) -> swig_int_ptr"""
        return _radio_astro_swig.vmedian_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(vmedian_sptr self) -> swig_int_ptr"""
        return _radio_astro_swig.vmedian_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(vmedian_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radio_astro_swig.vmedian_sptr_message_subscribers(self, which_port)

vmedian_sptr_swigregister = _radio_astro_swig.vmedian_sptr_swigregister
vmedian_sptr_swigregister(vmedian_sptr)


vmedian_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
vmedian = vmedian.make;



